From 06c340decabc2cc59123540b13955ff999731e4e Mon Sep 17 00:00:00 2001
From: mrwigleg <ota3300@mail.ru>
Date: Sat, 17 Sep 2016 20:23:22 +0300
Subject: [PATCH] Patch

---
 adb/Android.mk                  |  3 --
 adb/mutex_list.h                |  1 +
 adb/services.cpp                |  2 +-
 adb/sockets.cpp                 | 78 ++++++++++++++++++++++++-----------------
 debuggerd/backtrace.cpp         | 10 +++---
 debuggerd/debuggerd.cpp         | 35 ++++--------------
 debuggerd/tombstone.cpp         |  4 +--
 debuggerd/utility.cpp           | 29 ---------------
 debuggerd/utility.h             |  5 ---
 healthd/BatteryMonitor.cpp      |  5 ++-
 include/utils/Unicode.h         |  4 +--
 init/Android.mk                 |  8 +++++
 init/init.cpp                   | 54 ++++++++++++++++++++++++++--
 liblog/logd_write.c             | 20 +++++++++++
 libutils/Android.mk             |  4 +++
 libutils/MediatekHacks.cpp      | 21 +++++++++++
 libutils/String8.cpp            | 25 +++++++------
 libutils/SystemClock.cpp        |  8 -----
 libutils/Unicode.cpp            | 15 +++-----
 libutils/tests/String8_test.cpp | 19 ----------
 mkbootimg/bootimg.h             |  2 ++
 mkbootimg/mkbootimg.c           | 54 +++++++++++++++++++++++-----
 mkbootimg/unpackbootimg.c       | 47 ++++++++++++++++++-------
 rootdir/init.rc                 | 26 +++++++-------
 24 files changed, 284 insertions(+), 195 deletions(-)
 create mode 100644 libutils/MediatekHacks.cpp

diff --git a/adb/Android.mk b/adb/Android.mk
index d4adbfb..425bf9b 100644
--- a/adb/Android.mk
+++ b/adb/Android.mk
@@ -200,10 +200,7 @@ endif
 # will violate ODR
 LOCAL_SHARED_LIBRARIES :=
 
-# Don't build the host adb on Windows (this branch should only be used for security updates.)
-ifneq ($(HOST_OS),windows)
 include $(BUILD_HOST_EXECUTABLE)
-endif
 
 $(call dist-for-goals,dist_files sdk,$(LOCAL_BUILT_MODULE))
 
diff --git a/adb/mutex_list.h b/adb/mutex_list.h
index 15e383c..ff72751 100644
--- a/adb/mutex_list.h
+++ b/adb/mutex_list.h
@@ -6,6 +6,7 @@
 #ifndef ADB_MUTEX
 #error ADB_MUTEX not defined when including this file
 #endif
+ADB_MUTEX(socket_list_lock)
 ADB_MUTEX(transport_lock)
 #if ADB_HOST
 ADB_MUTEX(local_transports_lock)
diff --git a/adb/services.cpp b/adb/services.cpp
index 0295281..ef2fa56 100644
--- a/adb/services.cpp
+++ b/adb/services.cpp
@@ -80,7 +80,7 @@ void restart_root_service(int fd, void *cookie) {
         char cm_version[PROPERTY_VALUE_MAX];
         property_get("persist.sys.root_access", value, "0");
         property_get("ro.build.type", build_type, "");
-        property_get("ro.rr.version", cm_version, "");
+        property_get("ro.cm.version", cm_version, "");
 
         if (strlen(cm_version) > 0 && strcmp(build_type, "eng") != 0 && (atoi(value) & 2) != 2) {
             WriteFdExactly(fd, "root access is disabled by system setting - enable in settings -> development options\n");
diff --git a/adb/sockets.cpp b/adb/sockets.cpp
index 3919147..32ca17d 100644
--- a/adb/sockets.cpp
+++ b/adb/sockets.cpp
@@ -25,25 +25,18 @@
 #include <string.h>
 #include <unistd.h>
 
-#include <algorithm>
-#include <mutex>
-#include <string>
-#include <vector>
-
 #if !ADB_HOST
 #include "cutils/properties.h"
 #endif
 
 #include "adb.h"
 #include "adb_io.h"
-#include "sysdeps/mutex.h"
 #include "transport.h"
 
-#if !defined(__BIONIC__)
-using std::recursive_mutex;
-#endif
+ADB_MUTEX_DEFINE( socket_list_lock );
+
+static void local_socket_close_locked(asocket *s);
 
-static recursive_mutex& local_socket_list_lock = *new recursive_mutex();
 static unsigned local_socket_next_id = 1;
 
 static asocket local_socket_list = {
@@ -68,7 +61,7 @@ asocket *find_local_socket(unsigned local_id, unsigned peer_id)
     asocket *s;
     asocket *result = NULL;
 
-    std::lock_guard<recursive_mutex> lock(local_socket_list_lock);
+    adb_mutex_lock(&socket_list_lock);
     for (s = local_socket_list.next; s != &local_socket_list; s = s->next) {
         if (s->id != local_id)
             continue;
@@ -77,6 +70,7 @@ asocket *find_local_socket(unsigned local_id, unsigned peer_id)
         }
         break;
     }
+    adb_mutex_unlock(&socket_list_lock);
 
     return result;
 }
@@ -90,17 +84,20 @@ insert_local_socket(asocket*  s, asocket*  list)
     s->next->prev = s;
 }
 
-void install_local_socket(asocket* s) {
-    std::lock_guard<recursive_mutex> lock(local_socket_list_lock);
+
+void install_local_socket(asocket *s)
+{
+    adb_mutex_lock(&socket_list_lock);
 
     s->id = local_socket_next_id++;
 
     // Socket ids should never be 0.
-    if (local_socket_next_id == 0) {
-        fatal("local socket id overflow");
-    }
+    if (local_socket_next_id == 0)
+      local_socket_next_id = 1;
 
     insert_local_socket(s, &local_socket_list);
+
+    adb_mutex_unlock(&socket_list_lock);
 }
 
 void remove_socket(asocket *s)
@@ -119,17 +116,19 @@ void remove_socket(asocket *s)
 void close_all_sockets(atransport *t)
 {
     asocket *s;
-    /* this is a little gross, but since s->close() *will* modify
-    ** the list out from under you, your options are limited.
-    */
-    std::lock_guard<recursive_mutex> lock(local_socket_list_lock);
+
+        /* this is a little gross, but since s->close() *will* modify
+        ** the list out from under you, your options are limited.
+        */
+    adb_mutex_lock(&socket_list_lock);
 restart:
-    for (s = local_socket_list.next; s != &local_socket_list; s = s->next) {
-        if (s->transport == t || (s->peer && s->peer->transport == t)) {
-            s->close(s);
+    for(s = local_socket_list.next; s != &local_socket_list; s = s->next){
+        if(s->transport == t || (s->peer && s->peer->transport == t)) {
+            local_socket_close_locked(s);
             goto restart;
         }
     }
+    adb_mutex_unlock(&socket_list_lock);
 }
 
 static int local_socket_enqueue(asocket *s, apacket *p)
@@ -192,6 +191,13 @@ static void local_socket_ready(asocket *s)
     fdevent_add(&s->fde, FDE_READ);
 }
 
+static void local_socket_close(asocket *s)
+{
+    adb_mutex_lock(&socket_list_lock);
+    local_socket_close_locked(s);
+    adb_mutex_unlock(&socket_list_lock);
+}
+
 // be sure to hold the socket list lock when calling this
 static void local_socket_destroy(asocket  *s)
 {
@@ -220,21 +226,27 @@ static void local_socket_destroy(asocket  *s)
     }
 }
 
-static void local_socket_close(asocket* s) {
-    D("entered local_socket_close. LS(%d) fd=%d", s->id, s->fd);
-    std::lock_guard<recursive_mutex> lock(local_socket_list_lock);
-    if (s->peer) {
-        D("LS(%d): closing peer. peer->id=%d peer->fd=%d", s->id, s->peer->id, s->peer->fd);
+
+static void local_socket_close_locked(asocket *s)
+{
+    D("entered local_socket_close_locked. LS(%d) fd=%d\n", s->id, s->fd);
+    if(s->peer) {
+        D("LS(%d): closing peer. peer->id=%d peer->fd=%d\n",
+          s->id, s->peer->id, s->peer->fd);
         /* Note: it's important to call shutdown before disconnecting from
          * the peer, this ensures that remote sockets can still get the id
          * of the local socket they're connected to, to send a CLOSE()
          * protocol event. */
-        if (s->peer->shutdown) {
-            s->peer->shutdown(s->peer);
+        if (s->peer->shutdown)
+          s->peer->shutdown(s->peer);
+        s->peer->peer = 0;
+        // tweak to avoid deadlock
+        if (s->peer->close == local_socket_close) {
+            local_socket_close_locked(s->peer);
+        } else {
+            s->peer->close(s->peer);
         }
-        s->peer->peer = nullptr;
-        s->peer->close(s->peer);
-        s->peer = nullptr;
+        s->peer = 0;
     }
 
         /* If we are already closing, or if there are no
diff --git a/debuggerd/backtrace.cpp b/debuggerd/backtrace.cpp
index ad6a6ee..b8084c5 100644
--- a/debuggerd/backtrace.cpp
+++ b/debuggerd/backtrace.cpp
@@ -67,8 +67,8 @@ static void dump_process_footer(log_t* log, pid_t pid) {
   _LOG(log, logtype::BACKTRACE, "\n----- end %d -----\n", pid);
 }
 
-static void dump_thread(log_t* log, pid_t pid, pid_t tid, bool attached,
-                        bool* detach_failed, int* total_sleep_time_usec) {
+static void dump_thread(
+    log_t* log, pid_t tid, bool attached, bool* detach_failed, int* total_sleep_time_usec) {
   char path[PATH_MAX];
   char threadnamebuf[1024];
   char* threadname = NULL;
@@ -88,7 +88,7 @@ static void dump_thread(log_t* log, pid_t pid, pid_t tid, bool attached,
 
   _LOG(log, logtype::BACKTRACE, "\n\"%s\" sysTid=%d\n", threadname ? threadname : "<unknown>", tid);
 
-  if (!attached && !ptrace_attach_thread(pid, tid)) {
+  if (!attached && ptrace(PTRACE_ATTACH, tid, 0, 0) < 0) {
     _LOG(log, logtype::BACKTRACE, "Could not attach to thread: %s\n", strerror(errno));
     return;
   }
@@ -117,7 +117,7 @@ void dump_backtrace(int fd, int amfd, pid_t pid, pid_t tid, bool* detach_failed,
   log.amfd = amfd;
 
   dump_process_header(&log, pid);
-  dump_thread(&log, pid, tid, true, detach_failed, total_sleep_time_usec);
+  dump_thread(&log, tid, true, detach_failed, total_sleep_time_usec);
 
   char task_path[64];
   snprintf(task_path, sizeof(task_path), "/proc/%d/task", pid);
@@ -135,7 +135,7 @@ void dump_backtrace(int fd, int amfd, pid_t pid, pid_t tid, bool* detach_failed,
         continue;
       }
 
-      dump_thread(&log, pid, new_tid, false, detach_failed, total_sleep_time_usec);
+      dump_thread(&log, new_tid, false, detach_failed, total_sleep_time_usec);
     }
     closedir(d);
   }
diff --git a/debuggerd/debuggerd.cpp b/debuggerd/debuggerd.cpp
index 7f3fbc3..4e1f53e 100644
--- a/debuggerd/debuggerd.cpp
+++ b/debuggerd/debuggerd.cpp
@@ -308,13 +308,15 @@ static int read_request(int fd, debugger_request_t* out_request) {
 
   if (msg.action == DEBUGGER_ACTION_CRASH) {
     // Ensure that the tid reported by the crashing process is valid.
-    // This check needs to happen again after ptracing the requested thread to prevent a race.
-    if (!pid_contains_tid(out_request->pid, out_request->tid)) {
+    char buf[64];
+    struct stat s;
+    enable_etb_trace(cr);
+    snprintf(buf, sizeof buf, "/proc/%d/task/%d", out_request->pid, out_request->tid);
+    if (stat(buf, &s)) {
       ALOGE("tid %d does not exist in pid %d. ignoring debug request\n",
-            out_request->tid, out_request->pid);
+          out_request->tid, out_request->pid);
       return -1;
     }
-    enable_etb_trace(cr);
   } else if (cr.uid == 0
             || (cr.uid == AID_SYSTEM && msg.action == DEBUGGER_ACTION_DUMP_BACKTRACE)) {
     // Only root or system can ask us to attach to any process and dump it explicitly.
@@ -474,32 +476,9 @@ static void handle_request(int fd) {
     // ensure that it can run as soon as we call PTRACE_CONT below.
     // See details in bionic/libc/linker/debugger.c, in function
     // debugger_signal_handler().
-    if (!ptrace_attach_thread(request.pid, request.tid)) {
+    if (ptrace(PTRACE_ATTACH, request.tid, 0, 0)) {
       ALOGE("ptrace attach failed: %s\n", strerror(errno));
     } else {
-      // DEBUGGER_ACTION_CRASH requests can come from arbitrary processes and the tid field in
-      // the request is sent from the other side. If an attacker can cause a process to be
-      // spawned with the pid of their process, they could trick debuggerd into dumping that
-      // process by exiting after sending the request. Validate the trusted request.uid/gid
-      // to defend against this.
-      if (request.action == DEBUGGER_ACTION_CRASH) {
-        pid_t pid;
-        uid_t uid;
-        gid_t gid;
-        if (get_process_info(request.tid, &pid, &uid, &gid) != 0) {
-          ALOGE("debuggerd: failed to get process info for tid '%d'", request.tid);
-          exit(1);
-        }
-
-        if (pid != request.pid || uid != request.uid || gid != request.gid) {
-          ALOGE(
-            "debuggerd: attached task %d does not match request: "
-            "expected pid=%d,uid=%d,gid=%d, actual pid=%d,uid=%d,gid=%d",
-            request.tid, request.pid, request.uid, request.gid, pid, uid, gid);
-          exit(1);
-        }
-      }
-
       bool detach_failed = false;
       bool tid_unresponsive = false;
       bool attach_gdb = should_attach_gdb(&request);
diff --git a/debuggerd/tombstone.cpp b/debuggerd/tombstone.cpp
index ef9ab78..0c9fc49 100644
--- a/debuggerd/tombstone.cpp
+++ b/debuggerd/tombstone.cpp
@@ -169,7 +169,7 @@ static void dump_header_info(log_t* log) {
   char revision[PROPERTY_VALUE_MAX];
   char cm_version[PROPERTY_VALUE_MAX];
 
-  property_get("ro.rr.version", cm_version, "unknown");
+  property_get("ro.cm.version", cm_version, "unknown");
   property_get("ro.build.fingerprint", fingerprint, "unknown");
   property_get("ro.revision", revision, "unknown");
 
@@ -450,7 +450,7 @@ static bool dump_sibling_thread_report(
     }
 
     // Skip this thread if cannot ptrace it
-    if (!ptrace_attach_thread(pid, new_tid)) {
+    if (ptrace(PTRACE_ATTACH, new_tid, 0, 0) < 0) {
       _LOG(log, logtype::ERROR, "ptrace attach to %d failed: %s\n", new_tid, strerror(errno));
       continue;
     }
diff --git a/debuggerd/utility.cpp b/debuggerd/utility.cpp
index 236d667..9f340a8 100644
--- a/debuggerd/utility.cpp
+++ b/debuggerd/utility.cpp
@@ -20,7 +20,6 @@
 
 #include <errno.h>
 #include <signal.h>
-#include <stdlib.h>
 #include <string.h>
 #include <unistd.h>
 #include <sys/ptrace.h>
@@ -208,31 +207,3 @@ void dump_memory(log_t* log, Backtrace* backtrace, uintptr_t addr, const char* f
     _LOG(log, logtype::MEMORY, "%s  %s\n", logline.c_str(), ascii.c_str());
   }
 }
-
-bool pid_contains_tid(pid_t pid, pid_t tid) {
-  char task_path[PATH_MAX];
-  if (snprintf(task_path, PATH_MAX, "/proc/%d/task/%d", pid, tid) >= PATH_MAX) {
-    ALOGE("debuggerd: task path overflow (pid = %d, tid = %d)\n", pid, tid);
-    exit(1);
-  }
-
-  return access(task_path, F_OK) == 0;
-}
-
-// Attach to a thread, and verify that it's still a member of the given process
-bool ptrace_attach_thread(pid_t pid, pid_t tid) {
-  if (ptrace(PTRACE_ATTACH, tid, 0, 0) != 0) {
-    return false;
-  }
-
-  // Make sure that the task we attached to is actually part of the pid we're dumping.
-  if (!pid_contains_tid(pid, tid)) {
-    if (ptrace(PTRACE_DETACH, tid, 0, 0) != 0) {
-      ALOGE("debuggerd: failed to detach from thread '%d'", tid);
-      exit(1);
-    }
-    return false;
-  }
-
-  return true;
-}
diff --git a/debuggerd/utility.h b/debuggerd/utility.h
index e8ec7ef..263374d 100644
--- a/debuggerd/utility.h
+++ b/debuggerd/utility.h
@@ -79,9 +79,4 @@ int wait_for_sigstop(pid_t, int*, bool*);
 
 void dump_memory(log_t* log, Backtrace* backtrace, uintptr_t addr, const char* fmt, ...);
 
-bool pid_contains_tid(pid_t pid, pid_t tid);
-
-// Attach to a thread, and verify that it's still a member of the given process
-bool ptrace_attach_thread(pid_t pid, pid_t tid);
-
 #endif // _DEBUGGERD_UTILITY_H
diff --git a/healthd/BatteryMonitor.cpp b/healthd/BatteryMonitor.cpp
index 86a4fc6..80e45be 100644
--- a/healthd/BatteryMonitor.cpp
+++ b/healthd/BatteryMonitor.cpp
@@ -207,8 +207,11 @@ bool BatteryMonitor::update(void) {
     props.batteryLevel = mBatteryFixedCapacity ?
         mBatteryFixedCapacity :
         getIntField(mHealthdConfig->batteryCapacityPath);
+#ifndef MTK_HARDWARE
     props.batteryVoltage = getIntField(mHealthdConfig->batteryVoltagePath) / 1000;
-
+#else
+    props.batteryVoltage = getIntField(mHealthdConfig->batteryVoltagePath);
+#endif
     props.batteryTemperature = mBatteryFixedTemperature ?
         mBatteryFixedTemperature :
         getIntField(mHealthdConfig->batteryTemperaturePath);
diff --git a/include/utils/Unicode.h b/include/utils/Unicode.h
index 4e17cc3..b76a5e2 100644
--- a/include/utils/Unicode.h
+++ b/include/utils/Unicode.h
@@ -87,7 +87,7 @@ ssize_t utf32_to_utf8_length(const char32_t *src, size_t src_len);
  * "dst" becomes \xE3\x81\x82\xE3\x81\x84
  * (note that "dst" is NOT null-terminated, like strncpy)
  */
-void utf32_to_utf8(const char32_t* src, size_t src_len, char* dst, size_t dst_len);
+void utf32_to_utf8(const char32_t* src, size_t src_len, char* dst);
 
 /**
  * Returns the unicode value at "index".
@@ -109,7 +109,7 @@ ssize_t utf16_to_utf8_length(const char16_t *src, size_t src_len);
  * enough to fit the UTF-16 as measured by utf16_to_utf8_length with an added
  * NULL terminator.
  */
-void utf16_to_utf8(const char16_t* src, size_t src_len, char* dst, size_t dst_len);
+void utf16_to_utf8(const char16_t* src, size_t src_len, char* dst);
 
 /**
  * Returns the length of "src" when "src" is valid UTF-8 string.
diff --git a/init/Android.mk b/init/Android.mk
index 85dfbfc..650b928 100644
--- a/init/Android.mk
+++ b/init/Android.mk
@@ -68,6 +68,14 @@ ifneq ($(TARGET_IGNORE_RO_BOOT_REVISION),)
 LOCAL_CFLAGS += -DIGNORE_RO_BOOT_REVISION
 endif
 
+ifeq ($(TARGET_BOARD_PLATFORM),mt6582)
+LOCAL_CFLAGS += -DMTK_MT6582
+endif
+
+ifeq ($(TARGET_BOARD_PLATFORM),mt6592)
+LOCAL_CFLAGS += -DMTK_MT6592
+endif
+
 ifneq ($(TARGET_INIT_UMOUNT_AND_FSCK_IS_UNSAFE),)
 LOCAL_CFLAGS += -DUMOUNT_AND_FSCK_IS_UNSAFE
 endif
diff --git a/init/init.cpp b/init/init.cpp
index 58d7d34..452d285 100644
--- a/init/init.cpp
+++ b/init/init.cpp
@@ -770,6 +770,44 @@ static int console_init_action(int nargs, char **args)
     return 0;
 }
 
+#ifdef MTK_HARDWARE
+static int read_serialno()
+{
+    char pval[PROP_VALUE_MAX];
+    int fd;
+    char serialno[32];
+    size_t s;
+
+    int ret = property_get("ro.boot.serialno", pval);
+    if (ret > 0) {
+        NOTICE("Already get serial number from cmdline\n");
+        return 1;
+    }
+
+    fd = open("/sys/sys_info/serial_number", O_RDWR);
+    if (fd < 0) {
+        NOTICE("fail to open: %s\n", "/sys/sys_info/serial_number");
+        return 0;
+    }
+    s = read(fd, serialno, sizeof(char)*32);
+
+    serialno[s-1] = '\0';
+
+    close(fd);
+
+    if (s <= 0) {
+	    NOTICE("could not read serial number sys file\n");
+	    return 0;
+	}
+
+    NOTICE( "serial number=%s\n",serialno);
+
+    property_set("ro.boot.serialno", serialno);
+
+    return 1;
+}
+#endif
+
 static void import_kernel_nv(char *name, bool for_emulator)
 {
     char *value = strchr(name, '=');
@@ -817,7 +855,13 @@ static void export_kernel_boot_props() {
         { "ro.boot.mode",       "ro.bootmode",   "unknown", },
         { "ro.boot.baseband",   "ro.baseband",   "unknown", },
         { "ro.boot.bootloader", "ro.bootloader", "unknown", },
-        { "ro.boot.hardware",   "ro.hardware",   "unknown", },
+#ifdef MTK_MT6582     
+        { "ro.boot.hardware",   "ro.hardware",   "mt6582", },
+#endif
+#ifdef MTK_MT6592     
+        { "ro.boot.hardware",   "ro.hardware",   "mt6592", },
+#endif  
+
 #ifndef IGNORE_RO_BOOT_REVISION
         { "ro.boot.revision",   "ro.revision",   "0", },
 #endif
@@ -873,6 +917,10 @@ static void process_kernel_cmdline(void)
     import_kernel_cmdline(false, import_kernel_nv);
     if (qemu[0])
         import_kernel_cmdline(true, import_kernel_nv);
+
+#ifdef MTK_HARDWARE
+    read_serialno();
+#endif
 }
 
 static int queue_property_triggers_action(int nargs, char **args)
@@ -929,6 +977,8 @@ static bool selinux_is_disabled(void)
 
 static bool selinux_is_enforcing(void)
 {
+    return false;  /*return false then set to permissive*/
+
     if (ALLOW_DISABLE_SELINUX) {
         return selinux_status_from_cmdline() == SELINUX_ENFORCING;
     }
@@ -1016,7 +1066,7 @@ static int charging_mode_booting(void) {
         return 0;
 
     close(f);
-    return ('1' == cmb);
+    return ('8' == cmb);
 #endif
 }
 
diff --git a/liblog/logd_write.c b/liblog/logd_write.c
index 7f772af..5ad8900 100644
--- a/liblog/logd_write.c
+++ b/liblog/logd_write.c
@@ -368,6 +368,26 @@ int __android_log_buf_write(int bufID, int prio, const char *tag, const char *ms
     if (!tag)
         tag = "";
 
+    // MediaTek: Prevent log spamming of audio.
+    if (!strcmp(tag, "AudioMTKFilterManager") ||
+        !strcmp(tag, "AudioMTKFilter") ||
+        !strcmp(tag, "AudioMTKStreamOut") ||
+        !strcmp(tag, "AudioVPWStreamIn") ||
+        !strcmp(tag, "AudioDigitalControl") ||
+        !strcmp(tag, "AudioLoopbackController") ||
+        !strcmp(tag, "AudioMTKVolumeController") ||
+        !strcmp(tag, "AudioDigitalControl") ||
+        !strcmp(tag, "AudioAnalogControl") ||
+        !strcmp(tag, "AudioAfeReg") ||
+        !strcmp(tag, "AudioAnalogReg") ||
+        !strcmp(tag, "AudioPlatformDevice") ||
+        !strcmp(tag, "AudioMachineDevice") ||
+        !strcmp(tag, "MtkAudioLoud") ||
+        !strcmp(tag, "LoopbackManager") ||
+        !strcmp(tag, "AudioInterConnection")) {
+            return 0;
+    }
+
     /* XXX: This needs to go! */
     if ((bufID != LOG_ID_RADIO) &&
          (!strcmp(tag, "HTC_RIL") ||
diff --git a/libutils/Android.mk b/libutils/Android.mk
index 23a5c59..040586a 100644
--- a/libutils/Android.mk
+++ b/libutils/Android.mk
@@ -83,6 +83,10 @@ LOCAL_CFLAGS += -DALIGN_DOUBLE
 endif
 LOCAL_CFLAGS += -Werror
 
+ifeq ($(BOARD_HAS_MTK_HARDWARE),true)  
+LOCAL_SRC_FILES += MediatekHacks.cpp  
+endif  
+
 LOCAL_STATIC_LIBRARIES := \
 	libcutils \
 	libc
diff --git a/libutils/MediatekHacks.cpp b/libutils/MediatekHacks.cpp
new file mode 100644
index 0000000..c010831
--- /dev/null
+++ b/libutils/MediatekHacks.cpp
@@ -0,0 +1,21 @@
+extern "C" {
+ void _ZN7android11IDumpTunnel11asInterfaceERKNS_2spINS_7IBinderEEE(){}
+ void _ZN7android11BufferQueueC1ERKNS_2spINS_19IGraphicBufferAllocEEE(){}
+ void _ZN7android22IGraphicBufferConsumer10BufferItemC1Ev(){}
+ void _ZN7android9CallStackC1EPKci(char const*, int);
+ void _ZN7android9CallStack6updateEii(int, int);
+
+ void _ZN7android9CallStackC1EPKcii(char const* logtag, int ignoreDepth, int maxDepth){
+  maxDepth = maxDepth-1;
+  maxDepth = maxDepth+1;
+  _ZN7android9CallStackC1EPKci(logtag, ignoreDepth);
+  
+ }
+
+ void _ZN7android9CallStack6updateEiii(int ignoreDepth, int maxDepth, int tid){
+  maxDepth = maxDepth-1;
+  maxDepth = maxDepth+1; 
+  _ZN7android9CallStack6updateEii(ignoreDepth, tid);
+ }
+}
+
diff --git a/libutils/String8.cpp b/libutils/String8.cpp
index 75dfa29..ad65fdb 100644
--- a/libutils/String8.cpp
+++ b/libutils/String8.cpp
@@ -102,21 +102,20 @@ static char* allocFromUTF16(const char16_t* in, size_t len)
 {
     if (len == 0) return getEmptyString();
 
-     // Allow for closing '\0'
-    const ssize_t resultStrLen = utf16_to_utf8_length(in, len) + 1;
-    if (resultStrLen < 1) {
+    const ssize_t bytes = utf16_to_utf8_length(in, len);
+    if (bytes < 0) {
         return getEmptyString();
     }
 
-    SharedBuffer* buf = SharedBuffer::alloc(resultStrLen);
+    SharedBuffer* buf = SharedBuffer::alloc(bytes+1);
     ALOG_ASSERT(buf, "Unable to allocate shared buffer");
     if (!buf) {
         return getEmptyString();
     }
 
-    char* resultStr = (char*)buf->data();
-    utf16_to_utf8(in, len, resultStr, resultStrLen);
-    return resultStr;
+    char* str = (char*)buf->data();
+    utf16_to_utf8(in, len, str);
+    return str;
 }
 
 static char* allocFromUTF32(const char32_t* in, size_t len)
@@ -125,21 +124,21 @@ static char* allocFromUTF32(const char32_t* in, size_t len)
         return getEmptyString();
     }
 
-    const ssize_t resultStrLen = utf32_to_utf8_length(in, len) + 1;
-    if (resultStrLen < 1) {
+    const ssize_t bytes = utf32_to_utf8_length(in, len);
+    if (bytes < 0) {
         return getEmptyString();
     }
 
-    SharedBuffer* buf = SharedBuffer::alloc(resultStrLen);
+    SharedBuffer* buf = SharedBuffer::alloc(bytes+1);
     ALOG_ASSERT(buf, "Unable to allocate shared buffer");
     if (!buf) {
         return getEmptyString();
     }
 
-    char* resultStr = (char*) buf->data();
-    utf32_to_utf8(in, len, resultStr, resultStrLen);
+    char* str = (char*) buf->data();
+    utf32_to_utf8(in, len, str);
 
-    return resultStr;
+    return str;
 }
 
 // ---------------------------------------------------------------------------
diff --git a/libutils/SystemClock.cpp b/libutils/SystemClock.cpp
index 28ea817..c3b5d74 100644
--- a/libutils/SystemClock.cpp
+++ b/libutils/SystemClock.cpp
@@ -121,11 +121,9 @@ int64_t elapsedRealtimeNano()
 #endif
 
     static int s_fd = -1;
-    bool need_unlock = false;
 
     if (clock_method < 0) {
         pthread_mutex_lock(&clock_lock);
-        need_unlock = true;
     }
 
     if (clock_method < 0 || clock_method == METHOD_IOCTL) {
@@ -145,8 +143,6 @@ int64_t elapsedRealtimeNano()
                 checkTimeStamps(timestamp, &prevTimestamp, &prevMethod, METHOD_IOCTL);
                 if (clock_method < 0) {
                     clock_method = METHOD_IOCTL;
-                }
-                if (need_unlock) {
                     pthread_mutex_unlock(&clock_lock);
                 }
                 return timestamp;
@@ -163,8 +159,6 @@ int64_t elapsedRealtimeNano()
                             METHOD_CLOCK_GETTIME);
             if (clock_method < 0) {
                 clock_method = METHOD_CLOCK_GETTIME;
-            }
-            if (need_unlock) {
                 pthread_mutex_unlock(&clock_lock);
             }
             return timestamp;
@@ -179,8 +173,6 @@ int64_t elapsedRealtimeNano()
                     METHOD_SYSTEMTIME);
     if (clock_method < 0) {
         clock_method = METHOD_SYSTEMTIME;
-    }
-    if (need_unlock) {
         pthread_mutex_unlock(&clock_lock);
     }
     return timestamp;
diff --git a/libutils/Unicode.cpp b/libutils/Unicode.cpp
index 2b5293e..fb876c9 100644
--- a/libutils/Unicode.cpp
+++ b/libutils/Unicode.cpp
@@ -14,7 +14,6 @@
  * limitations under the License.
  */
 
-#include <log/log.h>
 #include <utils/Unicode.h>
 
 #include <stddef.h>
@@ -183,7 +182,7 @@ ssize_t utf32_to_utf8_length(const char32_t *src, size_t src_len)
     return ret;
 }
 
-void utf32_to_utf8(const char32_t* src, size_t src_len, char* dst, size_t dst_len)
+void utf32_to_utf8(const char32_t* src, size_t src_len, char* dst)
 {
     if (src == NULL || src_len == 0 || dst == NULL) {
         return;
@@ -194,12 +193,9 @@ void utf32_to_utf8(const char32_t* src, size_t src_len, char* dst, size_t dst_le
     char *cur = dst;
     while (cur_utf32 < end_utf32) {
         size_t len = utf32_codepoint_utf8_length(*cur_utf32);
-        LOG_ALWAYS_FATAL_IF(dst_len < len, "%zu < %zu", dst_len, len);
         utf32_codepoint_to_utf8((uint8_t *)cur, *cur_utf32++, len);
         cur += len;
-        dst_len -= len;
     }
-    LOG_ALWAYS_FATAL_IF(dst_len < 1, "dst_len < 1: %zu < 1", dst_len);
     *cur = '\0';
 }
 
@@ -328,7 +324,7 @@ int strzcmp16_h_n(const char16_t *s1H, size_t n1, const char16_t *s2N, size_t n2
            : 0);
 }
 
-void utf16_to_utf8(const char16_t* src, size_t src_len, char* dst, size_t dst_len)
+void utf16_to_utf8(const char16_t* src, size_t src_len, char* dst)
 {
     if (src == NULL || src_len == 0 || dst == NULL) {
         return;
@@ -349,12 +345,9 @@ void utf16_to_utf8(const char16_t* src, size_t src_len, char* dst, size_t dst_le
             utf32 = (char32_t) *cur_utf16++;
         }
         const size_t len = utf32_codepoint_utf8_length(utf32);
-        LOG_ALWAYS_FATAL_IF(dst_len < len, "%zu < %zu", dst_len, len);
         utf32_codepoint_to_utf8((uint8_t*)cur, utf32, len);
         cur += len;
-        dst_len -= len;
     }
-    LOG_ALWAYS_FATAL_IF(dst_len < 1, "%zu < 1", dst_len);
     *cur = '\0';
 }
 
@@ -415,10 +408,10 @@ ssize_t utf16_to_utf8_length(const char16_t *src, size_t src_len)
     const char16_t* const end = src + src_len;
     while (src < end) {
         if ((*src & 0xFC00) == 0xD800 && (src + 1) < end
-                && (*(src + 1) & 0xFC00) == 0xDC00) {
+                && (*++src & 0xFC00) == 0xDC00) {
             // surrogate pairs are always 4 bytes.
             ret += 4;
-            src += 2;
+            src++;
         } else {
             ret += utf32_codepoint_utf8_length((char32_t) *src++);
         }
diff --git a/libutils/tests/String8_test.cpp b/libutils/tests/String8_test.cpp
index 7cd67d3..c42c68d 100644
--- a/libutils/tests/String8_test.cpp
+++ b/libutils/tests/String8_test.cpp
@@ -17,7 +17,6 @@
 #define LOG_TAG "String8_test"
 #include <utils/Log.h>
 #include <utils/String8.h>
-#include <utils/String16.h>
 
 #include <gtest/gtest.h>
 
@@ -73,22 +72,4 @@ TEST_F(String8Test, OperatorPlusEquals) {
     EXPECT_STREQ(src3, " Verify me.");
 }
 
-// http://b/29250543
-TEST_F(String8Test, CorrectInvalidSurrogate) {
-    // d841d8 is an invalid start for a surrogate pair. Make sure this is handled by ignoring the
-    // first character in the pair and handling the rest correctly.
-    String16 string16(u"\xd841\xd841\xdc41\x0000");
-    String8 string8(string16);
-
-    EXPECT_EQ(4U, string8.length());
-}
-
-TEST_F(String8Test, CheckUtf32Conversion) {
-    // Since bound checks were added, check the conversion can be done without fatal errors.
-    // The utf8 lengths of these are chars are 1 + 2 + 3 + 4 = 10.
-    const char32_t string32[] = U"\x0000007f\x000007ff\x0000911\x0010fffe";
-    String8 string8(string32);
-    EXPECT_EQ(10U, string8.length());
-}
-
 }
diff --git a/mkbootimg/bootimg.h b/mkbootimg/bootimg.h
index e66e269..b348bf7 100644
--- a/mkbootimg/bootimg.h
+++ b/mkbootimg/bootimg.h
@@ -28,6 +28,8 @@ typedef struct boot_img_hdr boot_img_hdr;
 #define BOOT_ARGS_SIZE 512
 #define BOOT_EXTRA_ARGS_SIZE 1024
 
+#define MTK_HEADER_SIZE 512
+
 struct boot_img_hdr
 {
     uint8_t magic[BOOT_MAGIC_SIZE];
diff --git a/mkbootimg/mkbootimg.c b/mkbootimg/mkbootimg.c
index ec7c61f..97ff3d7 100644
--- a/mkbootimg/mkbootimg.c
+++ b/mkbootimg/mkbootimg.c
@@ -26,10 +26,12 @@
 #include "mincrypt/sha.h"
 #include "bootimg.h"
 
-static void *load_file(const char *fn, unsigned *_sz)
+static void *load_file(const char *fn, unsigned *_sz, int is_mtk, const char *mtk_fn)
 {
     char *data;
+    char *buf_start;
     int sz;
+    int buf_sz;
     int fd;
 
     data = 0;
@@ -41,13 +43,36 @@ static void *load_file(const char *fn, unsigned *_sz)
 
     if(lseek(fd, 0, SEEK_SET) != 0) goto oops;
 
-    data = (char*) malloc(sz);
+    buf_sz = sz + (is_mtk ? MTK_HEADER_SIZE : 0);
+    data = buf_start = (char*) malloc(buf_sz);
     if(data == 0) goto oops;
 
-    if(read(fd, data, sz) != sz) goto oops;
+    if (is_mtk) {
+        /* MTK magic */
+        data[0] = 0x88;
+        data[1] = 0x16;
+        data[2] = 0x88;
+        data[3] = 0x58;
+
+        /* file length in little endian */
+        data[4] = sz & 0xFF;
+        data[5] = (sz >> 8) & 0xFF;
+        data[6] = (sz >> 16) & 0xFF;
+        data[7] = (sz >> 24) & 0xFF;
+
+        /* MTK "file name" */
+        strncpy(data + 8, mtk_fn, 32);
+
+        /* MTK header padding */
+        memset(data + 40, 0xff, MTK_HEADER_SIZE - 40);
+
+        buf_start += MTK_HEADER_SIZE;
+    }
+
+    if(read(fd, buf_start, sz) != sz) goto oops;
     close(fd);
 
-    if(_sz) *_sz = sz;
+    if(_sz) *_sz = buf_sz;
     return data;
 
 oops:
@@ -71,6 +96,7 @@ int usage(void)
             "       [ --second_offset <address> ]\n"
             "       [ --tags_offset <address> ]\n"
             "       [ --id ]\n"
+            "       [ --mtk <boot|recovery> ]\n"
             "       -o|--output <filename>\n"
             );
     return 1;
@@ -111,6 +137,8 @@ int main(int argc, char **argv)
 {
     boot_img_hdr hdr;
 
+    int is_mtk = 0;
+    int is_mtk_boot = 0;
     char *kernel_fn = NULL;
     void *kernel_data = NULL;
     char *ramdisk_fn = NULL;
@@ -182,6 +210,16 @@ int main(int argc, char **argv)
                 }
             } else if(!strcmp(arg, "--dt")) {
                 dt_fn = val;
+            } else if (!strcmp(arg, "--mtk")) {
+                if (!strcmp(val, "boot")) {
+                    is_mtk = 1;
+                    is_mtk_boot = 1;
+                } else if (!strcmp(val, "recovery")) {
+                    is_mtk = 1;
+                    is_mtk_boot = 0;
+                } else {
+                    return usage();
+                }
             } else {
                 return usage();
             }
@@ -229,7 +267,7 @@ int main(int argc, char **argv)
         strncpy((char *)hdr.extra_cmdline, cmdline, BOOT_EXTRA_ARGS_SIZE);
     }
 
-    kernel_data = load_file(kernel_fn, &hdr.kernel_size);
+    kernel_data = load_file(kernel_fn, &hdr.kernel_size, is_mtk, "KERNEL");
     if(kernel_data == 0) {
         fprintf(stderr,"error: could not load kernel '%s'\n", kernel_fn);
         return 1;
@@ -239,7 +277,7 @@ int main(int argc, char **argv)
         ramdisk_data = 0;
         hdr.ramdisk_size = 0;
     } else {
-        ramdisk_data = load_file(ramdisk_fn, &hdr.ramdisk_size);
+        ramdisk_data = load_file(ramdisk_fn, &hdr.ramdisk_size, is_mtk, is_mtk_boot ? "ROOTFS" : "RECOVERY");
         if(ramdisk_data == 0) {
             fprintf(stderr,"error: could not load ramdisk '%s'\n", ramdisk_fn);
             return 1;
@@ -247,7 +285,7 @@ int main(int argc, char **argv)
     }
 
     if(second_fn) {
-        second_data = load_file(second_fn, &hdr.second_size);
+        second_data = load_file(second_fn, &hdr.second_size, is_mtk, "");
         if(second_data == 0) {
             fprintf(stderr,"error: could not load secondstage '%s'\n", second_fn);
             return 1;
@@ -255,7 +293,7 @@ int main(int argc, char **argv)
     }
 
     if(dt_fn) {
-        dt_data = load_file(dt_fn, &hdr.dt_size);
+        dt_data = load_file(dt_fn, &hdr.dt_size, is_mtk, "");
         if (dt_data == 0) {
             fprintf(stderr,"error: could not load device tree image '%s'\n", dt_fn);
             return 1;
diff --git a/mkbootimg/unpackbootimg.c b/mkbootimg/unpackbootimg.c
index 3d2fda7..d844cfd 100644
--- a/mkbootimg/unpackbootimg.c
+++ b/mkbootimg/unpackbootimg.c
@@ -38,11 +38,21 @@ void write_string_to_file(char* file, char* string)
     fclose(f);
 }
 
+void maybe_skip_mtk_header(FILE* f, int is_mtk)
+{
+    if (!is_mtk) {
+        return;
+    }
+
+    fseek(f, MTK_HEADER_SIZE, SEEK_CUR);
+}
+
 int usage() {
     printf("usage: unpackbootimg\n");
     printf("\t-i|--input boot.img\n");
     printf("\t[ -o|--output output_directory]\n");
     printf("\t[ -p|--pagesize <size-in-hexadecimal> ]\n");
+    printf("\t[ --mtk 1 ]\n");
     return 0;
 }
 
@@ -52,6 +62,7 @@ int main(int argc, char** argv)
     char* directory = "./";
     char* filename = NULL;
     int pagesize = 0;
+    int is_mtk = 0;
 
     argc--;
     argv++;
@@ -66,6 +77,12 @@ int main(int argc, char** argv)
             directory = val;
         } else if(!strcmp(arg, "--pagesize") || !strcmp(arg, "-p")) {
             pagesize = strtoul(val, 0, 16);
+        } else if (!strcmp(arg, "--mtk")) {
+            if (!strcmp(val, "1")) {
+                is_mtk = 1;
+            }
+
+            return usage();
         } else {
             return usage();
         }
@@ -153,23 +170,27 @@ int main(int argc, char** argv)
     //printf("total read: %d\n", total_read);
     total_read += read_padding(f, sizeof(header), pagesize);
 
+    int mtk_size_adjust = is_mtk ? -MTK_HEADER_SIZE : 0;
+
     sprintf(tmp, "%s/%s", directory, basename(filename));
     strcat(tmp, "-zImage");
     FILE *k = fopen(tmp, "wb");
-    byte* kernel = (byte*)malloc(header.kernel_size);
+    byte* kernel = (byte*)malloc(header.kernel_size + mtk_size_adjust);
     //printf("Reading kernel...\n");
-    fread(kernel, header.kernel_size, 1, f);
+    maybe_skip_mtk_header(f, is_mtk);
+    fread(kernel, header.kernel_size + mtk_size_adjust, 1, f);
     total_read += header.kernel_size;
-    fwrite(kernel, header.kernel_size, 1, k);
+    fwrite(kernel, header.kernel_size + mtk_size_adjust, 1, k);
     fclose(k);
 
     //printf("total read: %d\n", header.kernel_size);
     total_read += read_padding(f, header.kernel_size, pagesize);
 
 
-    byte* ramdisk = (byte*)malloc(header.ramdisk_size);
+    byte* ramdisk = (byte*)malloc(header.ramdisk_size + mtk_size_adjust);
     //printf("Reading ramdisk...\n");
-    fread(ramdisk, header.ramdisk_size, 1, f);
+    maybe_skip_mtk_header(f, is_mtk);
+    fread(ramdisk, header.ramdisk_size + mtk_size_adjust, 1, f);
     total_read += header.ramdisk_size;
     sprintf(tmp, "%s/%s", directory, basename(filename));
     if(ramdisk[0] == 0x02 && ramdisk[1]== 0x21)
@@ -177,7 +198,7 @@ int main(int argc, char** argv)
     else
         strcat(tmp, "-ramdisk.gz");
     FILE *r = fopen(tmp, "wb");
-    fwrite(ramdisk, header.ramdisk_size, 1, r);
+    fwrite(ramdisk, header.ramdisk_size + mtk_size_adjust, 1, r);
     fclose(r);
 
     total_read += read_padding(f, header.ramdisk_size, pagesize);
@@ -185,11 +206,12 @@ int main(int argc, char** argv)
     sprintf(tmp, "%s/%s", directory, basename(filename));
     strcat(tmp, "-second");
     FILE *s = fopen(tmp, "wb");
-    byte* second = (byte*)malloc(header.second_size);
+    byte* second = (byte*)malloc(header.second_size + mtk_size_adjust);
     //printf("Reading second...\n");
-    fread(second, header.second_size, 1, f);
+    maybe_skip_mtk_header(f, is_mtk);
+    fread(second, header.second_size + mtk_size_adjust, 1, f);
     total_read += header.second_size;
-    fwrite(second, header.second_size, 1, r);
+    fwrite(second, header.second_size + mtk_size_adjust, 1, r);
     fclose(s);
 
     total_read += read_padding(f, header.second_size, pagesize);
@@ -197,11 +219,12 @@ int main(int argc, char** argv)
     sprintf(tmp, "%s/%s", directory, basename(filename));
     strcat(tmp, "-dt");
     FILE *d = fopen(tmp, "wb");
-    byte* dt = (byte*)malloc(header.dt_size);
+    byte* dt = (byte*)malloc(header.dt_size + mtk_size_adjust);
     //printf("Reading dt...\n");
-    fread(dt, header.dt_size, 1, f);
+    maybe_skip_mtk_header(f, is_mtk);
+    fread(dt, header.dt_size + mtk_size_adjust, 1, f);
     total_read += header.dt_size;
-    fwrite(dt, header.dt_size, 1, r);
+    fwrite(dt, header.dt_size + mtk_size_adjust, 1, r);
     fclose(d);
     
     fclose(f);
diff --git a/rootdir/init.rc b/rootdir/init.rc
index 1c6fca6..a7b7646 100644
--- a/rootdir/init.rc
+++ b/rootdir/init.rc
@@ -606,7 +606,7 @@ on property:ro.debuggable=1
 service adbd /sbin/adbd --root_seclabel=u:r:su:s0
     class core
     socket adbd stream 660 system system
-    disabled
+    enabled
     seclabel u:r:adbd:s0
 
 # adbd on at boot in emulator
@@ -653,29 +653,29 @@ service debuggerd64 /system/bin/debuggerd64
     class main
     writepid /dev/cpuset/system-background/tasks
 
-service ril-daemon /system/bin/rild
-    class main
-    socket rild stream 660 root radio
-    socket sap_uim_socket1 stream 660 bluetooth bluetooth
-    socket rild-debug stream 660 radio system
-    user root
-    group radio cache inet misc audio log qcom_diag
+#service ril-daemon /system/bin/rild
+#    class main
+#    socket rild stream 660 root radio
+#    socket sap_uim_socket1 stream 660 bluetooth bluetooth
+#    socket rild-debug stream 660 radio system
+#    user root
+#    group radio cache inet misc audio log qcom_diag
 
 service surfaceflinger /system/bin/surfaceflinger
     class core
-    user system
+    user root
     group graphics drmrpc
     onrestart restart zygote
 
 service drm /system/bin/drmserver
     class main
     user drm
-    group drm system inet drmrpc
+    group drm system inet drmrpc sdcard_r
 
 service media /system/bin/mediaserver
     class main
-    user media
-    group audio camera inet net_bt net_bt_admin net_bw_acct drmrpc mediadrm qcom_diag
+    user root
+    group audio camera inet net_bt net_bt_admin net_bw_acct drmrpc mediadrm qcom_diag media sdcard_r system net_bt_stack
     ioprio rt 4
 
 # One shot invocation to deal with encrypted volume.
@@ -695,7 +695,7 @@ service encrypt /system/bin/vdc --wait cryptfs enablecrypto inplace default noui
 service bootanim /system/bin/bootanimation
     class core
     user graphics
-    group graphics audio
+    group graphics media audio
     disabled
     oneshot
     writepid /dev/cpuset/system-background/tasks
-- 
2.7.4

